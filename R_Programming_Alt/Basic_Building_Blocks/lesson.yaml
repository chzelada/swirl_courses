- Class: meta
  Course: Programacion y estadistica
  Lesson: Basic Building Blocks
  Author: Nick Carchedi (ENG) Carlos Zelada (SPA)
  Type: Standard
  Organization: Universidad Francisco Marroquin
  Version: 1.1.0

- Class: text
  Output: En esta leccion, exploraremos algunos conceptos basicos de la programacion
        en el lenguaje R. (R no admite tildes es por eso que en todas las preguntas
        se omitio el uso.)

- Class: text
  Output: Si en cualquier momento necesitas informacion sobre un topico en particular
        relacionado a R, puedes escribir help.start() en la linea de comando, que abrira 
        un menu de reursos. Alternativamente, una simple busqueda en google puede darte la respuesta
        que buscas.

- Class: cmd_question
  Output: en su forma mas simple, R puede ser usado com una calculadora interactiva. 
        Escribe 5 + 7 y presiona Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Escribe 5 + 7 y presiona Enter.

- Class: text
  Output: R simplemente imprime el resultado de 12 por defecto. Sin embargo, R es un
        lenguaje de programacion y muchas veces la razon por la cual usamos un lenguaje de
        programacion en lugar de una calculadora es para automatizar algunos procesos y 
        asi evitar repeticiones innecesarias.

- Class: text
  Output: en este caso, nosotros talvez queramos usar el resultado anterior en un 
        segundo calculo.
        En lugar de reescribir 5 + 7 cada vez que lo necesitemos, podemos simplemente
        crear una variable que guarde el resultado.

- Class: text
  Output: 'La forma en la que asignas un valor a una variable en R es usando el operador
        de asignacion, que es simplemente un simbolo de ''menos que'' seguido por un 
        ''signo menos''. Se mira de la siguiente forma: <-'

- Class: text
  Output: Piensa en el operador de asignacion como una flecha. Estas asignando el valor
         en la derecha de la flecha a la variable en el lado izquierdo de la flecha.

- Class: cmd_question
  Output: Para asignar el resultado de 5 + 7 a una nueva variable llamada x, escribes
        x <- 5 + 7. Esto se puede leer como 'x obtiene 5 mas 7'. Pruebalo ahora.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Escribe x <- 5 + 7. Es importante dejar un solo espacio a los lados del operador
        de asignacion, pero NO pongas un espacio entre `<` y `-` que forma la flecha.

- Class: text
  Output: Puedes notar que R no imprimio el resultado de 12 esta vez. Cuando usas el
        operador de asignacion, R asume que no quieres ver el resultado inmediatamente,
        si no que lo que probablemente quieras es guardarlo para usarlo despues.

- Class: cmd_question
  Output: Para ver el contenido de la variable x, solo escribe x y presiona Enter.
        Pruebalo ahora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Escribe x y presiona Enter. Esto imprimira automaticamente el valor de x.

- Class: cmd_question
  Output: Ahora, guarda el resultado de x - 3 en una nueva variable llamda y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Escribe y <- x - 3 y presiona Enter. el usar x - 3 o x-3 es a gusto personal, el
   espacio entre operadores aritmeticos no es necesario, pero es un buen habito usarlo con
   el operador de asignacion.

- Class: cmd_question
  Output: Cual es el valor de y? Escribe y para averiguarlo.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Escribe y y presiona Enter.

- Class: text
  Output: Ahora crearemos una coleccion de numeros llamada vector. Cualquier objeto
        que contiene data es llamada una estructura de datos y los vectores numericos son
        la forma mas simple de estructura de datos de R. De hecho, hasta un solo numero
        es considerado un vector de longitud uno.

- Class: cmd_question
  Output: La manera mas sencilla de crear un vector es con la funcion c(), la 'c' es
        por 'concatenar' o 'combinar'. Para crear un vector que contenga los numeros 1.1, 9, y 
         3.14, escribe c(1.1, 9, 3.14). Pruebalo y guarda el resultado en una variable llamada z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Escribir z <- c(1.1, 9, 3.14) asignara el vector (1.1, 9, 3.14) a una nueva
        variable llamada z. Incluir un solo espacio entre las commas en el vector no
        es requerido, pero ayuda a que tu codigo sea mas legible y menos desordenado.

- Class: cmd_question
  Output: Cuando tengas dudas cobre una funcion en particular, puedes accesar los archivos de
        ayuda de R, los cuales son muy completos y siempre de sacaran de apuros. Para accesar 
        la ayuda especifica de la funcio usa el comando `?`. Por ejemplo, si quieres mas info
        sobre la funcion c(), escribe ?c sin el parentesis que normalmente sigue al nombre de
        la funcion. Pruebalo ahora.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Escribe ?c y presiona Enter. Esto desplegara la ayuda de la funcion c().

- Class: cmd_question
  Output: Escribe z para ver su contenido. Nota que no hay commas separando
        los valores en la salida.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Escribe z y presiona Enter para ver su contenido.

- Class: cmd_question
  Output: Puedes combinar vectores para crear un nuevo vector. Crea un nuevo vector que
        contenga z, 555, y despues z otra vez en este orden. NO asignes este resultado
        en otra variable, para que puedas ver el resultado inmediatamente.
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Escribe c(z, 555, z). No crees una nueva variable. Solo queremos ver el resultado.

- Class: cmd_question
  Output: ' Vectores numericos pueden ser usados en expresiones aritmeticas. Escribe
        lo siguiente para ver que sucede: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Ingresa z * 2 + 100, sin asignarlo a una variable. El simbolo `*` 
    es usado para la multiplicacion. en tenclado en ingles aparece arriba del numero
    8 y en teclados en espaniol arriva del simbolo `+`.

- Class: text
  Output: Primero, R multiplica cada uno de los tres elementos en z por 2. Despues les
        suma 100 a cada elemento para obtener el resultado de arriba.

- Class: text
  Output: Otros operadores aritmeticos comunes son `+`, `-`, `/`, y `^`  (donde x^2
         significa 'x al cuadrado'). Para obtener la raiz cuadrada usa la funcion sqrt()
         y para obtner el valor absoluto del resultado, usa la funcion abs().

- Class: cmd_question
  Output: Calcula la raiz cuadrada the z - 1 y asignala a una nueva variable llamda
        mi_raiz.
  CorrectAnswer: mi_raiz <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='mi_raiz <- sqrt(z - 1)')
  Hint: Asigna el resultado de sqrt(z - 1) a la variable llamada mi_raiz.

- Class: mult_question
  Output: Antes de ver el contenido de la variable mi_raiz, que crees que contiene?
  CorrectAnswer: un vector de longitud 3
  AnswerChoices: un vector de longitud 3; un solo numero (i.e. un vector de longitud 1);
    un vector de longitud 0 (i.e. un vector vacio)
  AnswerTests: omnitest(correctVal='un vector de longitud 3')
  Hint: 'Piensa sobre como R manejo las otras operaciones ''vectorizadas'': elemento por
        elemento.'

- Class: cmd_question
  Output: Imprime el resultado de mi_raiz
  CorrectAnswer: mi_raiz
  AnswerTests: omnitest(correctExpr='mi_raiz')
  Hint: Solo escribe mi_raiz y presiona Enter para ver su valor.

- Class: text
  Output: Como adivinaste, R primer resta 1 de cada uno de los elementos de z, despues
        evalua la raiz cuadrada de cada uno de sus elementos. Este te deja con un vector de
        la misma longitud del vector original z.

- Class: cmd_question
  Output: Ahora, crea una nueva variable llamada mi_div que tenga el valor de z
        dividido por mi_raiz.
  CorrectAnswer: mi_div <- z / mi_raiz
  AnswerTests: omnitest(correctExpr='mi_div <- z / mi_raiz')
  Hint: Escribe mi_div <- z / mi_raiz. Los espacion en ambos lados del signo `/` no son
        requeridos, pero mejora la legibilidad por que hace que el codigo sea mas ordenado.
        Al final de cuentas, es una preferencia personal.

- Class: mult_question
  Output: Cual de los siguientes resultados piensas que es verdadero?
  CorrectAnswer: El primer elemento de mi_div es igual al primer elemento de z
        dividido por el primer elemento de mi_raiz, etcetera ...
  AnswerChoices: El primer elemento de mi_div es igual al primer elemento de z
        dividido por el primer elemento de mi_raiz, etcetera ...; mi_div es un solo numero (i.e un
        vector de longitud  1); mi_div no esta definido.
  AnswerTests: omnitest(correctVal='El primer elemento de mi_div es igual al primer elemento de z
        dividido por el primer elemento de mi_raiz, etcetera ...')
  Hint: Recuerda como R maneja lo operaciones 'vectorizada' como `+` y `*`.

- Class: cmd_question
  Output: Vamos imprime el contenido de mi_div. 
  CorrectAnswer: mi_div
  AnswerTests: omnitest(correctExpr='mi_div')
  Hint: Escribe mi_div y presiona Enter para ver el contenido.

- Class: text
  Output: Cuando se tienen dos vectores de la misma longitud, R realiza la operacion
        aritmetica elemento por elemento. Si los vectores son de diferente longitud, 
        R 'recicla' el vector mas corto hasta que sea del mismo tamanio del vector mayor.

- Class: text
  Output: Cuando hicimos z * 2 + 100 en nuestro ejemplo anterior, z era un vector de
        longitud 3, pero tecnicamente 2 y 100 son vectores de longitud 1.

- Class: text
  Output: 'Tras bambalinas, R esta ''reciclando'' el 2 para hacer un vector de 
        la misma longitud de z lleno de 2 y el 100 para hacer un vector relleno de
        100. En otras palabras , cuando le preguntas a R que compute z * 2 + 100,
        lo que realmente computa es : z * c(2, 2, 2) + c(100, 100, 100)'
  

- Class: cmd_question
  Output: Para ver otro ejemplo de como funciona el 'reciclado' de vectores, prueba
        sumar c(1, 2, 3, 4) y c(0, 10). No guardes el resultado en una variable.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Escribe c(1, 2, 3, 4) + c(0, 10) en la consola para ver como R suma dos vectores
    de diferente tamanio. No asignes el resultado a una variable.

- Class: text
  Output: Si la longitud del vector menor no divide enteramente la longitud del vector
        mayor, R igual aplicara el metodo de 'reciclaje', pero devolvera una advertencia
        haciendo ver que algo no huele bien.

- Class: cmd_question
  Output: Ingresa c(1, 2, 3, 4) + c(0, 10, 100) para un ejemplo.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Escribe c(1, 2, 3, 4) + c(0, 10, 100) para ver como R maneja la suma de dos vectores,
        Cuando el vector menor no divide enteramente al vector mayor. No asignes el resultado
        en una variable.

- Class: text
  Output: Antes de terminar esta leccion, me gustaria enseniarte algunos trucos que te 
        ayudaran a ahorrar tiempo.

- Class: text
  Output: Durante esta leccion, se computo  z * 2 +100.
        Pretendamos que cometiste un erro y que realmente queria sumar 1000 en lugar de 100.
        Podrian reescribir la expresion, o...

- Class: cmd_question
  Output: en muchos ambientes de programacion, la flecha hacia arriba cicla alrededor 
        de comandos ingresados anteriormente. Prueba presionar la flecha hacia arriba 
        del teclado hasta que obtengas el comando (z * 2 +100), despues cambia el 100 a
        1000 y presiona Enter. Si la flecha hacia arriba no funciona, solo escribe el
        comando correcto.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Si la flecha hacia arriba no funciona, solo escribe el
        comando correcto para seguir adelante.

- Class: text
  Output: Finalmente, pretendamos que quieres ver el contenido de una variable que creaste
        anteriormente, pero por alguna razon no recuerdad si la nombraste mi_div o
        MiDiv. Podrias probar ambas y ver cual funciona, o ...

- Class: cmd_question
  Output: Puedes escribir las primeras dos letras del nombre de la variable,
        despues presionar la tecla Tab (posiblemente mas de una vez). La mayoria
        de ambientes de programacion te daran una lista de variables que creaste que
        inician con 'mi'.
        Esto se llama auto-completacion y puede ser de mucha ayuda cuando tienes muchas
        variables en tu ambiente de trabajo. Pruebalo. (Si la auto-completacion no te
        funciona solo ingresa mi:div y presiona Enter.)
  CorrectAnswer: mi_div
  AnswerTests: omnitest(correctExpr='mi_div')
  Hint: Si la auto-completacion no te funciona solo ingresa mi_div y presiona Enter, para continuar.

- Class: mult_question
  Output: Quieres informar a tu profesor que terminaste la leccion?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
